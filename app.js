!function(e){var t={};function n(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,s){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(s,i,function(t){return e[t]}.bind(null,i));return s},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(0);function s(e){const t=document.createElement("li");return t.classList.add("unit"),t.innerHTML=`${e.name}<br>${e.time}<br>${e.message}`,t}function i(e){const t=document.createElement("li");return t.classList.add("unit"),t.dataset.userId=""+e.id,t.innerHTML=`<img class="userpic">&nbsp<span class="username">${e.name}</span>`,t}class r{constructor(){this.user=void 0,this.webSocket=new WebSocket("wss://vp-ahj-chat.herokuapp.com/")}async init(){this.render(),this.bindToDOM(),this.signupListen()}render(){document.body.append(function(){const e=document.createElement("main");return e.classList.add("wrapper"),e.innerHTML='\n  <div class="widget-container">\n  <h2 class="chat-header">AHJ-WS-Chat</h2>\n  <div class="chat-container">\n    <div class="list-wrapper">\n      <ul id="usersContainer" class="list-container users-container"></ul>\n    </div>\n    <div class="list-wrapper">\n      <ul id="msgContainer" class="msg-container list-container"></ul>\n    </div>\n  </div>\n\n  <form id="loginForm" class="form__input-button-holder ">\n    <input\n      id="loginInput"\n      class="form__input"\n      type="text"\n      placeholder="Введите псевдоним.."\n      name="name"\n      required\n    />\n    <button id="loginSend" type="button" class="btn btn-submit">Войти</button>\n  </form>\n\n  <form id="msgForm" class="form__input-button-holder visually-hidden">\n    <input\n      id="msgInput"\n      class="form__input"\n      type="text"\n      placeholder="Введите сообщение.."\n      name="msg"\n      required\n    />\n    <button id="msgSend" type="button" class="btn btn-submit">Отправить</button>\n  </form>\n</div>\n  ',e}())}bindToDOM(){this.chat=document.querySelector("ul.msg-container"),this.usersContainer=document.querySelector("ul.users-container"),this.loginForm=document.querySelector("#loginForm"),this.loginInput=document.querySelector("#loginInput"),this.loginSend=document.querySelector("#loginSend"),this.sendMsgForm=document.querySelector("#msgForm"),this.msgInput=document.querySelector("#msgInput"),this.btnMsgSend=document.querySelector("#msgSend")}signupListen(){this.loginInput.focus(),this.webSocket.addEventListener("message",e=>{e.preventDefault(),this.socketMsgHandler(e)},!1),this.loginSend.addEventListener("click",e=>{e.preventDefault(),this.signup()},!1),this.loginForm.addEventListener("submit",e=>{e.preventDefault(),this.signup()},!1)}async signup(){const e=this.loginInput.value;await this.webSocket.send(JSON.stringify({type:"login",login:e,time:new Date}))}socketMsgHandler(e){const t=JSON.parse(e.data),{type:n,usersList:i,error:r,state:o}=t;if("loginTrue"===o&&(this.loginForm.classList.add("visually-hidden"),this.sendMsgForm.classList.remove("visually-hidden"),this.user=t.user,this.chatInit()),r){const e=s(t);return e.classList.add("error"),this.chat.append(e),void this.chat.lastElementChild.scrollIntoView()}if("msg"===n&&this.user){let e;t.name===this.user.name?(t.name="You",e=s(t),e.classList.add("myself")):e=s(t),this.chat.append(e),this.chat.lastElementChild.scrollIntoView()}i&&(this.users=JSON.parse(i),this.renderUsers())}renderUsers(){this.usersContainer.innerHTML="";for(let e of this.users)this.usersContainer.append(i(e))}async chatInit(){this.msgInput.focus(),this.btnMsgSend.addEventListener("click",e=>{e.preventDefault(),this.sendMsg()},!1),this.sendMsgForm.addEventListener("submit",e=>{e.preventDefault(),this.sendMsg()},!1)}async sendMsg(){const e=this.msgInput.value;await this.webSocket.send(JSON.stringify({type:"msg",message:e,userId:this.user.id,time:new Date})),this.msgInput.value=""}}(new r).init()}]);
//# sourceMappingURL=app.js.map